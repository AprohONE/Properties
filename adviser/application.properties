server.port=8080
spring.application.name=adviser

logging.level.ru.igap=DEBUG
logging.pattern.console=%d{"yyyy/MM/dd HH:mm:ss,SSS"} [%p] - %msg%n

server.forward-headers-strategy=framework

springdoc.swagger-ui.path=/api/v1/swagger-ui/index.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.doc-expansion=none
springdoc.api-docs.path=/api/v1/api-docs
springdoc.default-consumes-media-type=application/json
springdoc.default-produces-media-type=application/json

#-------------------Postgresql-------------------------------------------------------------------
#spring.datasource.username = ${DB_USERNAME_LOCAL}
#spring.datasource.password = ${DB_PASSWORD_LOCAL}
#spring.datasource.url=jdbc:postgresql://${DB_SERVER_LOCAL}:${DB_PORT_LOCAL}/${DB_NAME_LOCAL}?prepareThreshold=0
spring.datasource.username = ${DB_USERNAME}
spring.datasource.password = ${DB_PASSWORD}
spring.datasource.url=jdbc:postgresql://${DB_SERVER}:${DB_PORT}/${DB_NAME}?prepareThreshold=0

spring.datasource.hikari.maximum-pool-size=10
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.default_schema="adviser"

spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.format_sql=false

#Flyway
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.flyway.default-schema=adviser
spring.flyway.schemas=adviser

#KAFKA
spring.cloud.stream.kafka.binder.brokers=${KAFKA_BROKERS}
spring.cloud.stream.kafka.binder.auto-create-topics=true
spring.cloud.stream.kafka.binder.min-partition-count=2
spring.cloud.stream.kafka.binder.auto-add-partitions=true

spring.kafka.consumer.auto-offset-reset=latest

#KAFKA-CONSUMER
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer

spring.cloud.function.definition=user-request
spring.cloud.stream.bindings.user-request-in-0.destination=user.request.message.event
spring.cloud.stream.bindings.user-request-in-0.group=adviser

#KAFKA-PRODUCER
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
spring.cloud.stream.bindings.websocket-out-0.destination=adviser.websocket.message.event
spring.cloud.stream.bindings.adviser-response-out-0.destination=adviser.response.message.event

#CORE
spring.cloud.openfeign.client.config.core.url=http://multiassistant-web-core:8080/internal-api/v1/adviser
spring.cloud.openfeign.client.config.core.connect-timeout=1000
spring.cloud.openfeign.client.config.core.read-timeout=2000

#SECURITY
spring.cloud.openfeign.client.config.users.url=http://multiassistant-web-security:8080/internal-api/security/v1/users
spring.cloud.openfeign.client.config.users.connect-timeout=1000
spring.cloud.openfeign.client.config.users.read-timeout=2000

#CRM
spring.cloud.openfeign.client.config.crm.url=${CRM_ENDPOINT}
spring.cloud.openfeign.client.config.crm.connect-timeout=3000
spring.cloud.openfeign.client.config.crm.read-timeout=5000

ru.igap.multiassistant.adviser.crm.secret-token=${CRM_SECRET_TOKEN}
ru.igap.multiassistant.adviser.crm.accept-header=application/json

ru.igap.multiassistant.adviser.crm.crm-request-enabled=false

#-------------------ProfanityFilter--------------------------------------------------------------
profanity.filter.dic.enabled=true


