server.port=8080
spring.application.name=core

logging.level.ru.igap=DEBUG
logging.pattern.console=%d{"yyyy/MM/dd HH:mm:ss,SSS"} [%p] - %msg%n

server.forward-headers-strategy=framework

springdoc.swagger-ui.path=/api/v1/swagger-ui/index.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.doc-expansion=none
springdoc.api-docs.path=/api/v1/api-docs
springdoc.default-consumes-media-type=application/json
springdoc.default-produces-media-type=application/json

#POSTGRESQL
#spring.datasource.username = ${DB_USERNAME_LOCAL}
#spring.datasource.password = ${DB_PASSWORD_LOCAL}
#spring.datasource.url=jdbc:postgresql://${DB_SERVER_LOCAL}:${DB_PORT_LOCAL}/${DB_NAME_LOCAL}?prepareThreshold=0
spring.datasource.username = ${DB_USERNAME}
spring.datasource.password = ${DB_PASSWORD}
spring.datasource.url=jdbc:postgresql://${DB_SERVER}:${DB_PORT}/${DB_NAME}?prepareThreshold=0


spring.datasource.hikari.maximum-pool-size=10
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.default_schema="core"

spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.format_sql=false

#Flyway
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.flyway.default-schema=core
spring.flyway.schemas=core

#KAFKA
spring.cloud.stream.kafka.binder.brokers=${KAFKA_BROKERS}
spring.cloud.stream.kafka.binder.auto-create-topics=true
spring.cloud.stream.kafka.binder.min-partition-count=2
spring.cloud.stream.kafka.binder.auto-add-partitions=true

spring.kafka.consumer.auto-offset-reset=latest

#KAFKA-CONSUMER
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer

spring.cloud.function.definition=adviser-response
spring.cloud.stream.bindings.adviser-response-in-0.destination=adviser.response.message.event
spring.cloud.stream.bindings.adviser-response-in-0.group=core

#KAFKA-PRODUCER
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer

spring.cloud.stream.bindings.websocket-out-0.destination=core.websocket.message.event

spring.cloud.stream.bindings.telegram-out-0.destination=bot.answer.message.event
spring.cloud.stream.bindings.telegram-int-out-0.destination=bot.int.answer.message.event

spring.cloud.stream.bindings.user-request-out-0.destination=user.request.message.event

#-------------------Application-------------------------------------------------------------------
spring.cloud.openfeign.client.config.adviser.url=http://multiassistant-web-adviser:8080/internal-api/v1/core
spring.cloud.openfeign.client.config.adviser.connect-timeout=1000
spring.cloud.openfeign.client.config.adviser.read-timeout=2000

spring.cloud.openfeign.client.config.ai.url=${AI_ENDPOINT}
spring.cloud.openfeign.client.config.ai.connect-timeout=5000
spring.cloud.openfeign.client.config.ai.read-timeout=10000

spring.cloud.openfeign.client.config.yandex-localization.url=https://translate.api.cloud.yandex.net/translate/v2/translate
spring.cloud.openfeign.client.config.yandex-localization.connect-timeout=5000
spring.cloud.openfeign.client.config.yandex-localization.read-timeout=10000

ru.igap.multiassistant.localization.yandex-api-key=${YANDEX_TRANSLATE_API_KEY}
ru.igap.multiassistant.localization.folder-id=${YANDEX_TRANSLATE_FOLDER_ID}

ru.igap.multiassistant.core.chat.adviser-mode-timestamp-validate=true

#-------------------ProfanityFilter--------------------------------------------------------------
profanity.filter.dic.enabled=true